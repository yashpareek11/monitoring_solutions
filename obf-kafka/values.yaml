# Global values of component...

global:

  podLabels: {}
  
  kafka:
      affinity: {}
  
      tolerations: []
  
  zookeeper:
      affinity: {}
  
      tolerations: []
  entityOperator:
      affinity: {}
      
      tolerations: []    
  exporter:
      affinity: {}
      
      tolerations: []
      
  kafkaLagExporter:
      affinity: {}
      
      tolerations: []
      
      
      
kafka:

   # Default values for kafka. 
   # This is a YAML-formatted file.
   # Declare variables to be passed into your templates.
   spec:
     kafka:
       version: 3.5.0
       replicas: 1 #6   #replica count for kafka
       resources: 
            requests:
               cpu: "1"
               memory: 1Gi
            limits:
               cpu: "1"
               memory: 1Gi
       listeners:
         plain:
           name: plain
           port: 9092
           type: internal
           tls: false
         tls:
           name: tls
           port: 9093
           type: internal
           tls: true
         external:
           name: external
           type: loadbalancer  # External Node Port configuration 
           port: 9096
           tls: false
           overrides: 
              advertisedHost: "" # Enter your system advertisedHost Address
              brokers: 
               advertisedPort: 9096 #Enter external starting port number
         externalssl:
           name: externalssl
           type: nodeport  # External-SSL Node Port configuration 
           port: 9097
           tls: true
           overrides: 
               brokers:
                advertisedPort: 32492 #Enter externalssl starting port number
       config:
         offsetsfactor: 1
         transactionfactor: 1
         transactionisr: 1
         logversion: "3.2"
         replicationFactor: 1
         retentionMs: 86400000 #1 Day
         segmentBytes: 209715200 #200mb
         partitions: 1
         MAX_MESSAGE_BYTES: 15242880 # 14.5367 MB
         SOCKET_REQUEST_MAX_BYTES: 15242880 # 14.5367 MB
         MESSAGE_MAX_BYTES: 15242880
         ssl_enabled_protocols: "TLSv1.2"
         ssl_protocols: "TLSv1.2"
         delete_topic_enable: true
         log_retention_check_interval_ms: 300000
         compression_type: "lz4"
         controlled_shutdown_enable: true
         num_recovery_threads_per_data_dir: 12
         replica_socket_receive_buffer_bytes: 655360
         replica_socket_timeout_ms: 160000
         log_cleaner_delete_retention_ms: 1800000
         request_timeout_ms: 60000
         zookeeper_connection_timeout_ms: 20000
         inter_broker_protocol_version: "3.2"
         min_insync_replicas: 1
         num_network_threads: 1
         num_io_threads: 1
         logger_kafka_controller: "WARN"
         rootLogger_level: "WARN"
       storageVolumes:
            storageClass: standard
            type: persistent-claim
            size: 1Gi
            accessMode: ReadWriteOnce
            deleteClaim: false
     exporter:
        resources:
           requests:
              cpu: 1
              memory: 1Gi
           limits:
              cpu: 1
              memory: 1Gi
        logging: debug
        enableSaramaLogging: true
        template: 
          service:
            metadata:
              labels:
                label1: value1
                label2: value2
              annotations:
                annotation1: value1
                annotation2: value2
        pod:
          metadata:
            labels:
              label1: value1
          imagePullSecrets:
              name: my-docker-credentials
          securityContext:
            runAsUser: 1000001
            fsGroup: 0
          terminationGracePeriodSeconds: 120
        readinessProbe: 
          initialDelaySeconds: 20
          timeoutSeconds: 5
        livenessProbe: 
          initialDelaySeconds: 1800
          timeoutSeconds: 5
     zookeeper:
       replicas: 1  #replica count for zookeeper
       resources: 
            requests:
               cpu: 100m
               memory: 50Mi
            limits:
               cpu: 1
               memory: 1Gi
       storage:
         class: standard
         type: persistent-claim
         size: 1Gi
         deleteClaim: false
   
   metricsConfig:
          type: jmxPrometheusExporter
          zookeeperKey: zookeeper-metrics-config.yml
          kafkaKey: kafka-metrics-config.yml
          
   jvmOptions:
      Xms: 1G
      Xmx: 1G     
         
   #readinessProbe Application readiness probe setting      
   readinessProbe:
      initialDelaySeconds: 20   # Initial delay for app startup
      periodSeconds: 20  #Interval period to check liveness of application
      failureThreshold: 10 #failureThreshold for application
      timeoutSeconds: 20 #timeoutSeconds  for application
   
   #readinessProbe Application liveness probe setting to insure application availability
   livenessProbe:
      initialDelaySeconds: 1800   # Initial delay for app startup
      periodSeconds: 30  #Interval period to check liveness of application
      failureThreshold: 10 #failureThreshold for application
      timeoutSeconds: 30  #timeoutSeconds  for application
      
   ############# Persistent Volume Define for Kafka and zookeeper ####################
   
   persistentVolume:
      enabled: false        # Specifies whether a Persistent Volume should be created or not
      spec:
         capacity:
           storage: 1Gi
         reclaimPolicy: Retain
         accessMode: ReadWriteOnce
         volumeMode: Filesystem
         storageClassName: standard            
         hostPath1:                              # Host path need to change as user requirement
             path: /root/kafkadata/vol/vol1      
         hostPath2:                             
             path: /root/kafkadata/vol/vol2   
         hostPath3:                             
             path: /root/kafkadata/vol/vol3
         hostPath4:                             
             path: /root/kafkadata/vol/vol4
         hostPath5:                             
             path: /root/kafkadata/vol/vol5
         hostPath6:                             
             path: /root/kafkadata/vol/vol6
   
             
   imagePullSecrets: []
   
   serviceAccount:
     # Specifies whether a service account should be created
     create: false
     # Annotations to add to the service account
     annotations: {}
     # The name of the service account to use.
     # If not set and create is true, a name is generated using the fullname template
     name: "obf-service-account"
   
   podAnnotations: 
       prometheus.io/scrape: 'true'
       prometheus.io/path: '/metrics'
       prometheus.io/port: '9404'
       prometheus.io/scheme: 'http'
       
   podSecurityContext: {}
     # fsGroup: 2000
   
   securityContext: {}
     # capabilities:
     #   drop:
     #   - ALL
     # readOnlyRootFilesystem: true
     # runAsNonRoot: true
     # runAsUser: 1000
   
   # provide whether kafka services need to create
   serviceCreate:
     enable: true
   
   
   service:
     type: ClusterIP
     port: 80
     exporterPort: 9404
   
   #Start Global props
   nameOverride: ""
   fullnameOverride: ""
   #End Global props
   
   #Start of ingress properties
   ingress:
     enabled: false
     annotations: {}
       # kubernetes.io/ingress.class: nginx
       # kubernetes.io/tls-acme: "true"
     hosts:
       - host: chart-example.local
         paths: []
     tls: []
     #  - secretName: chart-example-tls
     #    hosts:
     #      - chart-example.local
   #End of ingress properties
   
   
   #Start of HPA properties
   autoscaling:
     enabled: false
     minReplicas: 1
     maxReplicas: 100
     targetCPUUtilizationPercentage: 80
     # targetMemoryUtilizationPercentage: 80
   #End of HPA properties
   
   kafkaService:
       fixNodePort:
          enable: false
       externalTrafficPolicy: Cluster
       ports:
          tcpname: tcp-external
          protocol: TCP
          type: NodePort
          
   kafkaExporterService:
      enable: false # provide whether exporter pod and service should be create
      spec:
        type: ClusterIP
        port: 9404
        portname: rest
        
        


      
      
